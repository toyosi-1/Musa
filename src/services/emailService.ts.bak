import { getApp } from 'firebase/app';
import { getFunctions, httpsCallable } from 'firebase/functions';
import { User } from '@/types/user';

// Email templates
const EMAIL_TEMPLATES = {
  ACCOUNT_APPROVED: 'account_approved',
  ACCOUNT_REJECTED: 'account_rejected',
};

// Initialize Firebase Functions
const getFirebaseFunctions = () => {
  try {
    const app = getApp();
    return getFunctions(app);
  } catch (error) {
    console.error('Error initializing Firebase Functions:', error);
    throw new Error('Failed to initialize email service');
  }
};

/**
 * Send email notification when a user account is approved
 * @param user The approved user
 */
export const sendApprovalEmail = async (user: User): Promise<void> => {
  try {
    const functions = getFirebaseFunctions();
    const sendEmail = httpsCallable(functions, 'sendEmail');
    
    await sendEmail({
      template: EMAIL_TEMPLATES.ACCOUNT_APPROVED,
      recipient: user.email,
      data: {
        displayName: user.displayName || 'Resident',
        role: user.role,
        approvedAt: user.approvedAt ? new Date(user.approvedAt).toLocaleString() : new Date().toLocaleString(),
      }
    });
    
    console.log(`Approval email sent to ${user.email}`);
  } catch (error) {
    console.error('Error sending approval email:', error);
    // Non-blocking error - we don't want to prevent approval if email fails
  }
};

/**
 * Send email notification when a user account is rejected
 * @param user The rejected user
 * @param reason The rejection reason
 */
export const sendRejectionEmail = async (user: User, reason: string): Promise<void> => {
  try {
    const functions = getFirebaseFunctions();
    const sendEmail = httpsCallable(functions, 'sendEmail');
    
    await sendEmail({
      template: EMAIL_TEMPLATES.ACCOUNT_REJECTED,
      recipient: user.email,
      data: {
        displayName: user.displayName || 'Resident',
        reason: reason || 'No reason provided',
        contactEmail: 'support@yourestate.com', // Replace with your actual support email
      }
    });
    
    console.log(`Rejection email sent to ${user.email}`);
  } catch (error) {
    console.error('Error sending rejection email:', error);
    // Non-blocking error - we don't want to prevent rejection if email fails
  }
};

/**
 * Send batch notification emails for approved users
 * @param users Array of approved users
 */
export const sendBatchApprovalEmails = async (users: User[]): Promise<void> => {
  const promises = users.map(user => sendApprovalEmail(user));
  await Promise.allSettled(promises);
  console.log(`Batch approval emails sent to ${users.length} users`);
};

/**
 * Send batch notification emails for rejected users
 * @param users Array of rejected users with rejection reasons
 */
export const sendBatchRejectionEmails = async (users: User[], reason: string): Promise<void> => {
  const promises = users.map(user => sendRejectionEmail(user, reason));
  await Promise.allSettled(promises);
  console.log(`Batch rejection emails sent to ${users.length} users`);
};
